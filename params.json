{"name":"Practical Machine Learning Course Project","tagline":"Repository for Practical Machine Learning course project on Coursera","body":"## Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n## Data \r\n\r\nThe training data for this project are available [here.](https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv) \r\nThe test data are available [here.](https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv)\r\nThe data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. \r\n\r\n## Goal\r\n\r\nThe goal of this project is to predict the manner in which they did the exercise. This is the \"classe\" variable in the training set. We may use any of the other variables to predict with.\r\n\r\n## Reading data\r\n\r\nIn this project, I am going to use 'caret' package for building a predictive model. First, this package has been loaded into R and then the training and test data were read into R.\r\n\r\n\tlibrary(caret)\r\n\tdata<-read.csv('pml-training.csv', header=T)\r\n\tdata_test<-read.csv('pml-testing.csv', header=T)\r\n\r\n## Feature selection\r\n\r\nFeature selection largely influences the training time and the model performance.  Therefore, it is crucial to retain the important features and remove the uninteresting features. Examples of such uninteresting features include those that contain lot of missing values, those that exhibit high correlation with other features (redundancy), and those with variance near zero. \r\n\r\n### Variables with missing values\r\n\r\nHere, I excluded all those variables with more than 70% of missing values (NAs)\r\n\r\n\tnast<-sapply(1:ncol(data),function(i) if(sum(is.na(data[,i]))>0.7*nrow(data)){return(TRUE)}else{return(FALSE)})\r\n\tdata<-data[,!nast]\r\n\r\n### Near zero variance\r\n\r\nAll those variables with variance near zero were excluded.\r\n\r\n\tnzv <- nearZeroVar(data, saveMetrics = T)\r\n\tdata<-data[,!nzv$nzv]\r\n\r\n### Redundant features\r\n\r\nAll those fatures that exhibit high correlation (correlation coefficient > 0.70) with other features (not with the outcome variable classe) were also excluded. Also some features like the username and time-stamps that are not requred for prediction were also eliminated.\r\n\r\n\tcor_train<-cor(data.matrix(data[,1:ncol(data)-1]))\r\n\thighCorr<-findCorrelation(cor_train,0.70)\r\n\tdata<-data[,-highCorr]\r\n\tdata<-data[,5:ncol(data)]\r\n\r\n## Data partition\r\n\r\nThe provided training data has been further partitioned into training and test datasets in 60:40 ratio.\r\n\r\n\tinTrain<-createDataPartition(y=data$classe, p=0.6, list=FALSE)\r\n\ttraining<-data[inTrain,]\r\n\ttesting<-data[-inTrain,]\r\n\r\n## Cross Validation\r\n\r\nFor cross validation, 3 repeats of 10-fold cross validation method was used while training the model. \r\n\r\n    train_control<-trainControl(method='repeatedcv', number=10, repeats=3, verboseIter = TRUE)\r\n\r\n## Training the model\r\n\r\nDue to the popularity of the higher accuracy of ensemble methods, I chose to use a widely used ensemble method, the random forests, to train the model.\r\n\r\n\tmodel<-train(classe~.,data=training, trControl=train_control, method='rf')\r\n\r\n### In-sample error\r\n\r\n\tpred_train<-predict(model,newdata=training)\r\n\tconfusionMatrix(pred,training$classe)\r\n        \t\r\n        Confusion Matrix and Statistics\r\n\r\n\t          Reference\r\n\tPrediction    A    B    C    D    E\r\n\t         A 3348    0    0    0    0\r\n\t         B    0 2279    0    0    0\r\n\t         C    0    0 2054    0    0\r\n\t         D    0    0    0 1930    0\r\n\t         E    0    0    0    0 2165\r\n\r\n\tOverall Statistics\r\n                                     \r\n\t               Accuracy : 1          \r\n\t                 95% CI : (0.9997, 1)\r\n\t    No Information Rate : 0.2843     \r\n\t    P-Value [Acc > NIR] : < 2.2e-16  \r\n                                     \r\n\t                  Kappa : 1          \r\n\t Mcnemar's Test P-Value : NA         \r\n\r\n\tStatistics by Class:\r\n\r\n\t                     Class: A Class: B Class: C Class: D Class: E\r\n\tSensitivity            1.0000   1.0000   1.0000   1.0000   1.0000\r\n\tSpecificity            1.0000   1.0000   1.0000   1.0000   1.0000\r\n\tPos Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000\r\n\tNeg Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000\r\n\tPrevalence             0.2843   0.1935   0.1744   0.1639   0.1838\r\n\tDetection Rate         0.2843   0.1935   0.1744   0.1639   0.1838\r\n\tDetection Prevalence   0.2843   0.1935   0.1744   0.1639   0.1838\r\n\tBalanced Accuracy      1.0000   1.0000   1.0000   1.0000   1.0000\r\n\r\n### Out-of-sample error\r\n\r\nThe trained model exhibited an accuracy of 99.67% and the estimated out of sample error rate is 0.33%.\r\n\r\n\tpred_test<-predict(model,newdata=testing)\r\n\tconfusionMatrix(pred1,testing$classe)\r\n\r\n\tConfusion Matrix and Statistics\r\n\r\n\t          Reference\r\n\tPrediction    A    B    C    D    E\r\n\t         A 2229    2    0    0    0\r\n\t         B    0 1516    9    3    0\r\n\t         C    0    0 1355    5    0\r\n\t         D    1    0    4 1278    0\r\n\t         E    2    0    0    0 1442\r\n\t\r\n\tOverall Statistics\r\n\t                                          \r\n\t               Accuracy : 0.9967          \r\n\t                 95% CI : (0.9951, 0.9978)\r\n\t    No Information Rate : 0.2845          \r\n\t    P-Value [Acc > NIR] : < 2.2e-16       \r\n \t                                         \r\n \t                 Kappa : 0.9958          \r\n\t Mcnemar's Test P-Value : NA              \r\n\t\r\n\tStatistics by Class:\r\n\t\r\n\t                     Class: A Class: B Class: C Class: D Class: E\r\n\tSensitivity            0.9987   0.9987   0.9905   0.9938   1.0000\r\n\tSpecificity            0.9996   0.9981   0.9992   0.9992   0.9997\r\n\tPos Pred Value         0.9991   0.9921   0.9963   0.9961   0.9986\r\n\tNeg Pred Value         0.9995   0.9997   0.9980   0.9988   1.0000\r\n\tPrevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\n\tDetection Rate         0.2841   0.1932   0.1727   0.1629   0.1838\r\n\tDetection Prevalence   0.2843   0.1947   0.1733   0.1635   0.1840\r\n\tBalanced Accuracy      0.9991   0.9984   0.9949   0.9965   0.9998\r\n\r\n## Prediction on test data and submission\r\n\r\nThe trained model has been used to predict the classe variable of the unknown test data with 100% accuracy. The answers have been submitted to the course webpage.\r\n\r\n    pred_unknown<-predict(model,newdata=data_test)\r\n\r\n    pml_write_files = function(x){\r\n      n = length(x)\r\n      for(i in 1:n){\r\n        filename = paste0(\"problem_id_\",i,\".txt\")\r\n        write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n      }\r\n    }\r\n\r\n    pml_write_files(pred_unknown)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}